// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: inventory_srv.proto

package inventory_srv

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InventorySrv_DescInventory_FullMethodName = "/inventory_srv.Inventory_srv/DescInventory"
	InventorySrv_AddInventory_FullMethodName  = "/inventory_srv.Inventory_srv/AddInventory"
)

// InventorySrvClient is the client API for InventorySrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventorySrvClient interface {
	// 扣减库存
	DescInventory(ctx context.Context, in *DRequest, opts ...grpc.CallOption) (*DResponse, error)
	// 增加库存
	AddInventory(ctx context.Context, in *AResquest, opts ...grpc.CallOption) (*AResponse, error)
}

type inventorySrvClient struct {
	cc grpc.ClientConnInterface
}

func NewInventorySrvClient(cc grpc.ClientConnInterface) InventorySrvClient {
	return &inventorySrvClient{cc}
}

func (c *inventorySrvClient) DescInventory(ctx context.Context, in *DRequest, opts ...grpc.CallOption) (*DResponse, error) {
	out := new(DResponse)
	err := c.cc.Invoke(ctx, InventorySrv_DescInventory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventorySrvClient) AddInventory(ctx context.Context, in *AResquest, opts ...grpc.CallOption) (*AResponse, error) {
	out := new(AResponse)
	err := c.cc.Invoke(ctx, InventorySrv_AddInventory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventorySrvServer is the server API for InventorySrv service.
// All implementations must embed UnimplementedInventorySrvServer
// for forward compatibility
type InventorySrvServer interface {
	// 扣减库存
	DescInventory(context.Context, *DRequest) (*DResponse, error)
	// 增加库存
	AddInventory(context.Context, *AResquest) (*AResponse, error)
	mustEmbedUnimplementedInventorySrvServer()
}

// UnimplementedInventorySrvServer must be embedded to have forward compatible implementations.
type UnimplementedInventorySrvServer struct {
}

func (UnimplementedInventorySrvServer) DescInventory(context.Context, *DRequest) (*DResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescInventory not implemented")
}
func (UnimplementedInventorySrvServer) AddInventory(context.Context, *AResquest) (*AResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInventory not implemented")
}
func (UnimplementedInventorySrvServer) mustEmbedUnimplementedInventorySrvServer() {}

// UnsafeInventorySrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventorySrvServer will
// result in compilation errors.
type UnsafeInventorySrvServer interface {
	mustEmbedUnimplementedInventorySrvServer()
}

func RegisterInventorySrvServer(s grpc.ServiceRegistrar, srv InventorySrvServer) {
	s.RegisterService(&InventorySrv_ServiceDesc, srv)
}

func _InventorySrv_DescInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventorySrvServer).DescInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventorySrv_DescInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventorySrvServer).DescInventory(ctx, req.(*DRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventorySrv_AddInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AResquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventorySrvServer).AddInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventorySrv_AddInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventorySrvServer).AddInventory(ctx, req.(*AResquest))
	}
	return interceptor(ctx, in, info, handler)
}

// InventorySrv_ServiceDesc is the grpc.ServiceDesc for InventorySrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventorySrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventory_srv.Inventory_srv",
	HandlerType: (*InventorySrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescInventory",
			Handler:    _InventorySrv_DescInventory_Handler,
		},
		{
			MethodName: "AddInventory",
			Handler:    _InventorySrv_AddInventory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory_srv.proto",
}
