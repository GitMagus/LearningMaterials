// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: integral.proto

package integral

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Integral_SendIntegral_FullMethodName = "/integral.Integral/SendIntegral"
)

// IntegralClient is the client API for Integral service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntegralClient interface {
	// 随机获取积分
	SendIntegral(ctx context.Context, in *IRequest, opts ...grpc.CallOption) (*IResponse, error)
}

type integralClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegralClient(cc grpc.ClientConnInterface) IntegralClient {
	return &integralClient{cc}
}

func (c *integralClient) SendIntegral(ctx context.Context, in *IRequest, opts ...grpc.CallOption) (*IResponse, error) {
	out := new(IResponse)
	err := c.cc.Invoke(ctx, Integral_SendIntegral_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegralServer is the server API for Integral service.
// All implementations must embed UnimplementedIntegralServer
// for forward compatibility
type IntegralServer interface {
	// 随机获取积分
	SendIntegral(context.Context, *IRequest) (*IResponse, error)
	mustEmbedUnimplementedIntegralServer()
}

// UnimplementedIntegralServer must be embedded to have forward compatible implementations.
type UnimplementedIntegralServer struct {
}

func (UnimplementedIntegralServer) SendIntegral(context.Context, *IRequest) (*IResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendIntegral not implemented")
}
func (UnimplementedIntegralServer) mustEmbedUnimplementedIntegralServer() {}

// UnsafeIntegralServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntegralServer will
// result in compilation errors.
type UnsafeIntegralServer interface {
	mustEmbedUnimplementedIntegralServer()
}

func RegisterIntegralServer(s grpc.ServiceRegistrar, srv IntegralServer) {
	s.RegisterService(&Integral_ServiceDesc, srv)
}

func _Integral_SendIntegral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegralServer).SendIntegral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Integral_SendIntegral_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegralServer).SendIntegral(ctx, req.(*IRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Integral_ServiceDesc is the grpc.ServiceDesc for Integral service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Integral_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "integral.Integral",
	HandlerType: (*IntegralServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendIntegral",
			Handler:    _Integral_SendIntegral_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "integral.proto",
}
